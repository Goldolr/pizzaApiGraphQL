"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
@scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    pizzas: [pizza!]! @all
    pizza(id: Int! @eq): pizza @find

    ingredients: [Ingredient!]! @all
    ingredient(id: Int! @eq): Ingredient @find
}

type User {
    id: Int!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type pizza {
    id: Int!
    name: String
    origin: String
    ingredient: Ingredient! @belongsTo
}

type Ingredient {
    id: Int!
    name: String
    calories: String
    pizzas: [pizza] @hasMany
}

input createPizzaInput {
    # id: Int!
    name: String!
    origin: String!
    ingredient_id:Int!
}
input createIngredientInput {
    # id: Int!
    name: String!
    # pizza_id:Int
    calories: String!
}
input updatePizzasInput {
    name: String!
    origin: String!
}

input updateIngredientInput{
    name:String
    calories:String
}

type Mutation {
    createPizza(input: createPizzaInput! @spread): pizza @create
    createIngredient(input: createIngredientInput! @spread): Ingredient @create

    updatePizza(id: Int!, input: updatePizzasInput! @spread): pizza @update
    updateIngredient(id:Int!,input: updateIngredientInput! @spread): Ingredient @update
    
    deletePizza(id:Int! @rules(apply:["required"])):pizza @delete
    deleteIngredient(id:Int! @rules(apply:["required"])):Ingredient @delete 
}
# type Mutation{
#     createPizza(name:String!):pizza @create
# }
